// clang-format off
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//  Written By : Student Name                    Environment : ubuntu:bionic               //
//  Date ......: 2021/02/10                      Compiler ...: clang-10                    //
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
// clang-format on
/////////////////////////////////////////////////////////////////////////////////////////////
//                             Framework Set-up //
/////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CATCH_CONFIG_MAIN
#  define CATCH_CONFIG_MAIN
#endif
#include "catch.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////
//                                 Includes //
/////////////////////////////////////////////////////////////////////////////////////////////
#include <stdexcept>

#include "image_ppm.hpp"
#include "pixel.hpp"
#include "seam_carver.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////
//                             Helpers/Constants //
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
//                                Test Cases //
/////////////////////////////////////////////////////////////////////////////////////////////

TEST_CASE("True == True", "") { REQUIRE(true == true); }
TEST_CASE("Image_ppm1","Image Read")
{   
    int width,height; 
    int curve_h[]={1,1,1,1};
    int curve_v[]={0,0,0};
    int E1[3][4] = 
    {
        {75,525,525,450},
        {0,0,0,0},
        {75,525,525,450},
    }; 
    ImagePPM image_pppm0("./image1.ppm");
    width=image_pppm0.GetWidth();
    height=image_pppm0.GetHeight();
    REQUIRE(width==4);
    REQUIRE(height==3);
    SeamCarver carver(image_pppm0);
    int *pSeam;
    pSeam = carver.GetHorizontalSeam();
    int i=0;
    while(i < width)
     {
          REQUIRE(pSeam[i]==curve_h[i]);
          i++;
     }
    pSeam = carver.GetVerticalSeam();
    i = 0;
    while(i< height) 
    {
        REQUIRE(pSeam[i]==curve_v[i]);
        i++;
    }
    for(int row =0 ;row < height; row++)
       for(int col=0; col < width; col++)
         REQUIRE(E1[row][col]==carver.GetEnergy(row,col));
} 
/////////////////////////////////////////////////////////////////////////////////////////////